export(g.analyse, g.calibrate,
       g.getmeta, g.impute,
       g.inspectfile, g.binread,
       g.plot, g.part1,
       g.part2, g.part3,
       g.part4, g.part5,
       GGIR, g.shell.GGIR, g.getbout,
       g.wavread, g.cwaread,
       chartime2iso8601, g.abr.day.names,
       g.applymetrics, g.createcoordinates,
       g.create.sp.mat, g.detecmidnight,
       g.dotorcomma, g.downsample,
       getFirstTimestamp, getStartEndNumeric,
       getStartEnd, g.extractheadervars,
       g.getidfromheaderobject, g.getM5L5,
       g.getstarttime, g.loadlog,
       g.plot5, g.readaccfile,
       g.report.part2, g.report.part4,
       g.report.part5, g.sib.det,
       g.sib.plot, g.wavread,
       g.weardec, isfilelist,
       iso8601chartime2POSIX, is_this_a_dst_night,
       POSIXtime2iso8601, numUnpack,
       resample, is.ISO8601,
       updateBlocksize, g.IVIS,
       createConfigFile, identify_levels,
       g.sib.sum, datadir2fnames,
       read.myacc.csv, g.part5.addfirstwake,
       g.part5.addsib, g.part5.definedays,
       g.part5.fixmissingnight, g.part5.onsetwaketiming,
       g.part5.wakesleepwindows, g.part5.savetimeseries,
       get_nw_clip_block_params, get_starttime_weekday_meantemp_truncdata,
       ismovisens, g.readtemp_movisens,
       g.conv.actlog, g.fragmentation,
       g.intensitygradient, g.part5.handle_lux_extremes,
       g.part5.lux_persegment,
       g.sibreport, HASPT,
       HASIB, g.part4_extractid,
       CalcSleepRegularityIndex, load_params,
       check_params, extract_params,
       g.imputeTimegaps, read.gt3x_ggir,
       parseGT3Xggir, g.part5.classifyNaps,
       tidyup_df, cosinorAnalyses)
importFrom("grDevices", "colors", "dev.off", "pdf","rainbow","rgb")
importFrom("graphics", "abline", "axis", "par", "plot", "plot.new",
           "rect","axis.POSIXct", "barplot", "box", "legend",
           "lines", "mtext", "text", "arrows", "segments")
importFrom("utils", "read.csv", "sessionInfo", "write.csv",
           "installed.packages", "setTxtProgressBar",
           "txtProgressBar", "write.table", "head",
           "memory.limit", "memory.size", "tail", "unzip")
importFrom("stats", "aggregate.data.frame", "weighted.mean",
           "rnorm","median","aggregate","C", "lm.wfit",
           "quantile", "sd","coef", "lm", "embed", "na.pass",
            "residuals", "fitted")
import(data.table)
importFrom("methods", "is")
useDynLib(GGIR, .registration = TRUE)
importFrom(Rcpp, sourceCpp)
